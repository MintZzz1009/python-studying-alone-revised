# 함수 관련 기본 용어
# program
# pro: 미리 또는 앞으로
# 예) prophet: 미리 + 말하는 것 = 예언자
# 예) proceed: 앞으로 + 가다 = 나아가다
# gram: 작성된 것
# 예) instagram: 즉시, 즉석으로, 바로, 순간 + 작성한 것

# program: 미리 + 직성된 것 = 미리 작성된 것
# e.g. 하루 일정.

# 루틴(routine), 절차(procedure), 방법(method)

# 코드 전체: 프로그램(program), 루틴(routine)
# 다른 의미로 변경: 절차(procedure), 방법(method)


# 케이크를 먹는 프로그램, 루틴
케이크 = {
    '이름': '당근 케이크',
    '남은 무게': 300
}

# 서브루틴, 서브프로그램, # 다른 의미로 변경: 절차(procedure), 방법(method)
# 케이크 한 조각을 먹는 프로그램, 루틴
# 그냥 변수(variable)이 아니다 매개변수(parameter)이다
def 이름(먹을양):
    print(f'케이크를 {먹을양}g 만큼 자르고')
    print('케이크를 먹는다')
    케이크['남은 무게'] -= 먹을양
    print(f'남은 케이크의 무게는 {케이크['남은 무게']}입니다.')

# 절차(procedure): 매개변수를 갖는 서브루틴
# 서브프로그램, 서브루틴, 방법(method)
이름(100)

# f(x) = x^2 + 2x + 1
output = 0
def f(x):
    output = x ** 2 + 2 * x + 1

f(10)
print(output)   # 0

f(20)
print(output)   # 0
# 파이썬은 이런 코드를 용납하지 않는다. output변수를 제대로 추적할 수 없기 때문이다.

# 함수: 수학에서 가져온 용어
# f(x) 코드 자체가 값이 될 수있게
# 함수: 프로시저 + '리턴 값'


# 정리
# 코드 전체: 프로그램, 루틴(+ 프로시저, 메서드)
# 작은 코드: 서브프로그램, 서브루틴(+ 프로시저, 메서드)

# 매개변수를 갖는 서브프로그램/서브루틴: 프로시저(procedure)
# 리턴값을 갖는 프로시저: 함수(function)
# 클래스 내부에 있는 함수: 메서드(method)

# ADA: 프로시저 문법과 함수 문법이 완전히 분리!
# 현대적인 프로그래밍 언어: 함수로 통합!
# 파이썬: 함수로 통합!